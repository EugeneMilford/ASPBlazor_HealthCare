@page "/doctors"

@using HealthCare.Frontend.Clients
@using HealthCare.Frontend.Models
@inject DoctorsClient doctorsClient
@inject NavigationManager NavigationManager

<!-- Breadcrumb - Dynamic version -->
<div class="container-fluid breadcrumb-container @GetBreadcrumbClass()">
    <div class="container text-center py-5">
        <h1 class="text-white display-4 mb-4 fw-bold">@PageTitle</h1>
        <ol class="breadcrumb justify-content-center mb-0">
            <li class="breadcrumb-item"><a href="/" class="text-white">Home</a></li>
            <li class="breadcrumb-item active text-primary">@CurrentPage</li>
        </ol>    
    </div>
</div>
 
<!-- Medical Professionals Section -->
<section class="medical-team py-5">
    <div class="container">
        <!-- Section Header -->
        <div class="section-header text-center mb-5">
            <h4 class="text-primary">Our Specialists</h4>
            <h2 class="display-5 mb-3 text-dark">Meet Our Expert Medical Team</h2>
            <p class="lead text-medium-gray">Our board-certified physicians bring exceptional skill and compassionate care to every patient interaction.</p>
        </div>

        @if (isLoading)
        {
            <div class="text-center">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading doctors information...</p>
            </div>
        }
        else if (doctors == null || doctors.Length == 0)
        {
            <div class="alert alert-info" role="alert">
                No doctors information available at the moment. Please check back later.
            </div>
        }
        else
        {
            <div class="row g-4">
                <!-- Doctor Cards -->
                @foreach (var doctor in doctors)
                {
                    <div class="col-lg-6">
                        <div class="doctor-card">
                            <div class="row g-0">
                                <div class="col-md-5">
                                    <img src="@GetDoctorImage(doctor?.Name)" class="img-fluid rounded-start h-100" alt="@(doctor?.Name ?? "Doctor")">
                                </div>
                                <div class="col-md-7">
                                    <div class="doctor-info p-4">
                                        <h3 class="doctor-name">@(doctor?.Name ?? "Doctor")</h3>
                                        <span class="doctor-specialty">@GetDoctorSpecialty(doctor?.Name)</span>
                                        <p class="doctor-bio mt-3">@GetDoctorBio(doctor?.Name)</p>
                                        
                                        <div class="doctor-meta mt-3">
                                            <div class="meta-item">
                                                <i class="fas fa-graduation-cap me-2"></i>
                                                <span class="doctor-specialty">@GetDoctorEducation(doctor?.Name)</span>
                                            </div>
                                            <div class="meta-item">
                                                <i class="fas fa-certificate me-2"></i>
                                                <span class="doctor-specialty">@(GetDoctorCertified(doctor?.Name) ? "Board Certified" : "Not Certified")</span>
                                            </div>
                                        </div>
                                        
                                        <div class="doctor-social mt-4">
                                            <a href="#" class="social-link"><i class="fab fa-linkedin-in"></i></a>
                                            <a href="#" class="social-link"><i class="fas fa-envelope"></i></a>
                                            <a href="#" class="social-link"><i class="fas fa-calendar-alt"></i></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</section>

@code {
    private Doctor[] doctors;
    private bool isLoading = true;

    private Dictionary<string, (string Specialty, string Bio, string Education, bool Certified)> doctorDetails = new()
    {
        { "Dr. Smith", ("Cardiology", "Board-certified cardiologist with 12 years of experience specializing in interventional procedures.", "University of Cape Town Faculty of Health Sciences", true) },
        { "Dr. Johnson", ("Neurology", "Leading neurologist specializing in movement disorders and neurodegenerative diseases.", "Stellenbosch University Faculty of Medicine and Health Sciences", true) },
        { "Dr. Williams", ("Pediatrics", "Compassionate pediatrician with special interest in developmental disorders and adolescent medicine.", "University of Cape Town Faculty of Health Sciences", true) },
        { "Dr. Brown", ("Orthopedic Surgery", "Expert in joint replacement and sports medicine with minimally invasive techniques.", "University of the Western Cape Faculty of Dentistry and Health Sciences", true) },
        { "Dr. Davis", ("Dermatology", "Specialized in treating complex skin conditions and dermatological oncology.", "University of Cape Town Faculty of Health Sciences with fellowship at Groote Schuur Hospital", true) }
    };

    private Dictionary<string, string> doctorImages = new()
    {
        { "Dr. Smith", "/images/Michael-Smith.jpg" },
        { "Dr. Johnson", "/images/Emily-Johnson.jpg" },
        { "Dr. Williams", "/images/Justin-Williams.jpg" },
        { "Dr. Brown", "/images/Melissa-Brown.jpg" },
        { "Dr. Davis", "/images/Henry-Davis.jpg" }
    };

    private string GetDoctorImage(string doctorName)
    {
        if (string.IsNullOrEmpty(doctorName)) 
        {
            return "/images/doctors/default-doctor.jpg";
        }
        return doctorImages.ContainsKey(doctorName) ? doctorImages[doctorName] : "/images/doctors/default-doctor.jpg";
    }

    private string GetDoctorSpecialty(string doctorName)
    {
        if (string.IsNullOrEmpty(doctorName)) 
        {
            return "Specialist";
        }
        return doctorDetails.ContainsKey(doctorName) ? doctorDetails[doctorName].Specialty : "Specialist";
    }

    private string GetDoctorBio(string doctorName)
    {
        if (string.IsNullOrEmpty(doctorName)) 
        {
            return "Information not available";
        }
        return doctorDetails.ContainsKey(doctorName) ? doctorDetails[doctorName].Bio : "Information not available";
    }

    private string GetDoctorEducation(string doctorName)
    {
        if (string.IsNullOrEmpty(doctorName)) 
        {
            return "Information not available";
        }
        return doctorDetails.ContainsKey(doctorName) ? doctorDetails[doctorName].Education : "Information not available";
    }

    private bool GetDoctorCertified(string doctorName)
    {
        if (string.IsNullOrEmpty(doctorName)) 
        {
            return false;
        }
        return doctorDetails.ContainsKey(doctorName) && doctorDetails[doctorName].Certified;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            doctors = await doctorsClient.GetDoctorsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading doctors: {ex.Message}");
            doctors = Array.Empty<Doctor>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private string CurrentPage => GetCurrentPage();
    private string PageTitle => GetPageTitle();

    private string GetBreadcrumbClass()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return relativePath.Split('/')[0] switch
        {
            "doctors" => "breadcrumb-doctors",
            "appointments" => "breadcrumb-appointments",
            "departments" => "breadcrumb-departments",
            "contact" => "breadcrumb-contact",
            "services" => "breadcrumb-services",
            _ => "breadcrumb-home"
        };
    }

    private string GetCurrentPage()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return relativePath.Split('/')[0] switch
        {
            "doctors" => "Doctors",
            "appointments" => "Appointments",
            "departments" => "Departments",
            "contact" => "Contact",
            "services" => "Services",
            _ => "Home"
        };
    }

    private string GetPageTitle()
    {
        return CurrentPage switch
        {
            "Doctors" => "Our Medical Specialists",
            "Appointments" => "Book an Appointment",
            "Departments" => "Our Departments",
            "Contact" => "Contact Our Clinic",
            "Services" => "Our Services",
            _ => "Quality Healthcare Services"
        };
    }
}