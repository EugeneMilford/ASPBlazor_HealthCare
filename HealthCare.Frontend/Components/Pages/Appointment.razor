@page "/appointments"
@inject AppointmentClient Client
@inject NavigationManager NavigationManager
@using HealthCare.Frontend.Clients
@rendermode InteractiveServer

<PageTitle>Scheduled Appointments</PageTitle>

<!-- Breadcrumb - Dynamic version -->
<div class="container-fluid breadcrumb-container @GetBreadcrumbClass()">
    <div class="container text-center py-5">
        <h1 class="text-white display-4 mb-4 fw-bold">@PageTitle</h1>
        <ol class="breadcrumb justify-content-center mb-0">
            <li class="breadcrumb-item"><a href="/" class="text-white">Home</a></li>
            <li class="breadcrumb-item active text-primary">@CurrentPage</li>
        </ol>    
    </div>
</div>

<div class="appointment-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="appointment-header">
            <i class="fas fa-calendar-check me-2"></i>Upcoming Appointments
        </h2>
        <a href="/editappointment" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>New Appointment
        </a>
    </div>
    
    @if (appointments == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (appointments.Length == 0)
    {
        <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>No appointments found. Click "New Appointment" to schedule one.
        </div>
    }
    else
    {
        <div class="appointment-list">
            @foreach (var appointment in appointments)
            {
                <div class="appointment-card @appointment.Status.ToLower() mb-4">
                    <div class="appointment-card-header d-flex justify-content-between align-items-center p-3">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-user-circle me-3 fa-2x"></i>
                            <span class="patient-name h5 mb-0">@appointment.Name</span>
                        </div>
                        <span class="appointment-status badge rounded-pill px-3 py-2">
                            @appointment.Status
                        </span>
                    </div>
                    
                    <div class="appointment-details p-3">
                        <div class="detail-row row mb-2">
                            <div class="col-4 detail-label">
                                <i class="fas fa-user-md me-2"></i>Doctor:
                            </div>
                            <div class="col-8 detail-value fw-bold">
                                @appointment.Doctor
                            </div>
                        </div>
                        <div class="detail-row row mb-2">
                            <div class="col-4 detail-label">
                                <i class="fas fa-clock me-2"></i>Date/Time:
                            </div>
                            <div class="col-8 detail-value">
                                @appointment.AppointmentDateTime.ToString("f")
                            </div>
                        </div>
                        <div class="detail-row row mb-2">
                            <div class="col-4 detail-label">
                                <i class="fas fa-stopwatch me-2"></i>Duration:
                            </div>
                            <div class="col-8 detail-value">
                                @appointment.Duration.ToString(@"hh\:mm")
                            </div>
                        </div>
                        <div class="detail-row row">
                            <div class="col-4 detail-label">
                                <i class="fas fa-stethoscope me-2"></i>Type:
                            </div>
                            <div class="col-8 detail-value">
                                @appointment.AppointmentType
                            </div>
                        </div>
                    </div>
                    
                    <div class="appointment-footer d-flex justify-content-between p-3 @(string.IsNullOrEmpty(appointment.Notes) ? "rounded-bottom" : "")">
                        @if (!string.IsNullOrEmpty(appointment.Notes))
                        {
                            <div class="appointment-notes bg-light rounded p-3 flex-grow-1 me-2">
                                <span class="notes-label fw-bold d-block mb-2">
                                    <i class="fas fa-notes-medical me-2"></i>Notes:
                                </span>
                                <p class="mb-0">@appointment.Notes</p>
                            </div>
                        }
                        <div class="appointment-footer d-flex justify-content-between p-3">
                        <!-- Edit button -->
                <a href="/editappointment/@appointment.PatientId" class="btn btn-primary me-2">
                    <i class="fas fa-edit me-2"></i>Edit
                </a>
        
                <!-- Delete button - now navigates to delete page -->
                <a href="/deleteappointment/@appointment.PatientId" class="btn btn-danger">
                    <i class="fas fa-trash me-2"></i>Delete
                </a>
            </div>
        </div>
    </div>

                
        }
    </div>
        
    <div class="text-center mt-4">
        <button @onclick="RefreshAppointments" class="btn btn-outline-secondary">
            <i class="fas fa-sync-alt me-2"></i>Refresh List
        </button>
    </div>
    }
</div>

@code {
    private AppointmentSummary[] appointments;

    protected override async Task OnInitializedAsync()
    {
        await LoadAppointments();
    }
    
    private async Task LoadAppointments()
    {
        appointments = await Task.FromResult(Client.GetAppointments());
    }
    
    private async Task RefreshAppointments()
    {
        await LoadAppointments();
        StateHasChanged();
    }

    private string CurrentPage => GetCurrentPage();
    private string PageTitle => GetPageTitle();

    private string GetBreadcrumbClass()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return relativePath.Split('/')[0] switch
        {
            "doctors" => "breadcrumb-doctors",
            "appointments" => "breadcrumb-appointments",
            "departments" => "breadcrumb-departments",
            "contact" => "breadcrumb-contact",
            "services" => "breadcrumb-services",
            _ => "breadcrumb-home"
        };
    }

    private string GetCurrentPage()
    {
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        return relativePath.Split('/')[0] switch
        {
            "doctors" => "Doctors",
            "appointments" => "Appointments",
            "departments" => "Departments",
            "contact" => "Contact",
            "services" => "Services",
            _ => "Home"
        };
    }

    private string GetPageTitle()
    {
        return CurrentPage switch
        {
            "Doctors" => "Our Medical Specialists",
            "Appointments" => "Book an Appointment",
            "Departments" => "Our Departments",
            "Contact" => "Contact Our Clinic",
            "Services" => "Our Services",
            _ => "Quality Healthcare Services"
        };
    }
}